import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette("husl")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.titlesize'] = 12
plt.rcParams['axes.labelsize'] = 10
plt.rcParams['xtick.labelsize'] = 9
plt.rcParams['ytick.labelsize'] = 9
plt.rcParams['legend.fontsize'] = 9
plt.rcParams['figure.titlesize'] = 14

print("üî¨ –°–û–ó–î–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –ù–ê–£–ß–ù–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
print("="*60)

# –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
results_data = {
    'PHCF-BPR': {'precision': 0.0696, 'recall': 0.0775, 'ndcg': 0.1729, 'accuracy': 0.9111, 'type': 'LightFM'},
    'KNN+PHCF-BPR': {'precision': 0.0667, 'recall': 0.0780, 'ndcg': 0.1778, 'accuracy': 0.9108, 'type': 'Hybrid'},
    'NCF': {'precision': 0.0538, 'recall': 0.0590, 'ndcg': 0.1628, 'accuracy': 0.9094, 'type': 'Neural'},
    'KNN': {'precision': 0.0474, 'recall': 0.0738, 'ndcg': 0.1483, 'accuracy': 0.9088, 'type': 'Collaborative'},
    'Popular': {'precision': 0.0661, 'recall': 0.0380, 'ndcg': 0.1140, 'accuracy': 0.9110, 'type': 'Baseline'},
    'LightFM-WARP': {'precision': 0.0509, 'recall': 0.0651, 'ndcg': 0.1426, 'accuracy': 0.9094, 'type': 'LightFM'},
    'WRMF': {'precision': 0.0579, 'recall': 0.0182, 'ndcg': 0.1021, 'accuracy': 0.9099, 'type': 'Matrix Factorization'},
    'SASRec': {'precision': 0.0515, 'recall': 0.0158, 'ndcg': 0.0952, 'accuracy': 0.9094, 'type': 'Neural'},
    'KNN+LightFM-WARP': {'precision': 0.0468, 'recall': 0.0611, 'ndcg': 0.1108, 'accuracy': 0.9092, 'type': 'Hybrid'},
    'NMF': {'precision': 0.0263, 'recall': 0.0300, 'ndcg': 0.0589, 'accuracy': 0.9071, 'type': 'Matrix Factorization'},
    'PCA': {'precision': 0.0281, 'recall': 0.0169, 'ndcg': 0.0634, 'accuracy': 0.9071, 'type': 'Matrix Factorization'},
    'DeepFM': {'precision': 0.0351, 'recall': 0.0085, 'ndcg': 0.0490, 'accuracy': 0.9078, 'type': 'Neural'},
    'Random': {'precision': 0.0287, 'recall': 0.0061, 'ndcg': 0.0359, 'accuracy': 0.9074, 'type': 'Baseline'},
    'SVD': {'precision': 0.0216, 'recall': 0.0103, 'ndcg': 0.0423, 'accuracy': 0.9066, 'type': 'Matrix Factorization'},
    'ALS': {'precision': 0.0181, 'recall': 0.0170, 'ndcg': 0.0429, 'accuracy': 0.9066, 'type': 'Matrix Factorization'}
}

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
df = pd.DataFrame(results_data).T
df.reset_index(inplace=True)
df.rename(columns={'index': 'algorithm'}, inplace=True)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
numeric_columns = ['precision', 'recall', 'ndcg', 'accuracy']
for col in numeric_columns:
    df[col] = pd.to_numeric(df[col])

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä
df['overall_score'] = df['precision'] * 0.4 + df['recall'] * 0.3 + df['ndcg'] * 0.3

print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

# –§–∏–≥—É—Ä–∞ 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (6 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤)
fig = plt.figure(figsize=(16, 12))

# 1. –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º
ax1 = plt.subplot(3, 3, 1)
metrics = ['precision', 'recall', 'ndcg']
x = np.arange(len(df))
width = 0.25

for i, metric in enumerate(metrics):
    plt.bar(x + i*width, df[metric], width, label=metric.upper(), alpha=0.8)

plt.xlabel('–ê–ª–≥–æ—Ä–∏—Ç–º—ã')
plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
plt.title('(a) –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º')
plt.xticks(x + width, df['algorithm'], rotation=45, ha='right')
plt.legend()
plt.grid(True, alpha=0.3)

# 2. Scatter plot: Precision vs Recall
ax2 = plt.subplot(3, 3, 2)
type_colors = {'LightFM': 'red', 'Neural': 'blue', 'Collaborative': 'green', 
               'Matrix Factorization': 'orange', 'Baseline': 'purple', 'Hybrid': 'brown'}

for algo_type in df['type'].unique():
    subset = df[df['type'] == algo_type]
    plt.scatter(subset['precision'], subset['recall'], 
               label=algo_type, s=100, alpha=0.7, color=type_colors.get(algo_type, 'gray'))

# –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-3 –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
top3 = df.nlargest(3, 'overall_score')
for _, row in top3.iterrows():
    plt.annotate(row['algorithm'], (row['precision'], row['recall']), 
                xytext=(5, 5), textcoords='offset points', fontsize=8)

plt.xlabel('Precision')
plt.ylabel('Recall')
plt.title('(b) Precision vs Recall –ø–æ —Ç–∏–ø–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True, alpha=0.3)

# 3. Box plot –ø–æ —Ç–∏–ø–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
ax3 = plt.subplot(3, 3, 3)
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è box plot
melted_df = df.melt(id_vars=['algorithm', 'type'], 
                   value_vars=['precision', 'recall', 'ndcg'],
                   var_name='metric', value_name='value')

sns.boxplot(data=melted_df, x='type', y='value', hue='metric')
plt.xticks(rotation=45, ha='right')
plt.title('(c) –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º')
plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')

# 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
ax4 = plt.subplot(3, 3, 4)
corr_matrix = df[['precision', 'recall', 'ndcg', 'accuracy']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, 
            square=True, fmt='.3f')
plt.title('(d) –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫')

# 5. –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
ax5 = plt.subplot(3, 3, 5)
df_sorted = df.sort_values('overall_score', ascending=True)
colors = [type_colors.get(t, 'gray') for t in df_sorted['type']]
plt.barh(range(len(df_sorted)), df_sorted['overall_score'], color=colors, alpha=0.7)
plt.yticks(range(len(df_sorted)), df_sorted['algorithm'])
plt.xlabel('–û–±—â–∏–π —Å–∫–æ—Ä')
plt.title('(e) –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
plt.grid(True, alpha=0.3)

# 6. Radar chart –¥–ª—è —Ç–æ–ø-5
ax6 = plt.subplot(3, 3, 6, projection='polar')
top5 = df.nlargest(5, 'overall_score')
metrics_radar = ['precision', 'recall', 'ndcg', 'accuracy']
angles = np.linspace(0, 2 * np.pi, len(metrics_radar), endpoint=False).tolist()
angles += angles[:1]

for i, (_, row) in enumerate(top5.iterrows()):
    values = [row[metric] for metric in metrics_radar]
    values += values[:1]
    ax6.plot(angles, values, 'o-', linewidth=2, label=row['algorithm'])
    ax6.fill(angles, values, alpha=0.1)

ax6.set_xticks(angles[:-1])
ax6.set_xticklabels([m.upper() for m in metrics_radar])
ax6.set_title('(f) Radar chart —Ç–æ–ø-5 –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
ax6.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))

# 7. PCA –∞–Ω–∞–ª–∏–∑
ax7 = plt.subplot(3, 3, 7)
features = df[['precision', 'recall', 'ndcg', 'accuracy']].values
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)
pca = PCA(n_components=2)
pca_result = pca.fit_transform(features_scaled)

for algo_type in df['type'].unique():
    mask = df['type'] == algo_type
    plt.scatter(pca_result[mask, 0], pca_result[mask, 1], 
               label=algo_type, s=100, alpha=0.7, color=type_colors.get(algo_type, 'gray'))

plt.xlabel(f'PC1 ({pca.explained_variance_ratio_[0]:.1%} variance)')
plt.ylabel(f'PC2 ({pca.explained_variance_ratio_[1]:.1%} variance)')
plt.title('(g) PCA: –î–≤—É–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ')
plt.legend()
plt.grid(True, alpha=0.3)

# 8. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
ax8 = plt.subplot(3, 3, 8)
type_scores = df.groupby('type')['overall_score'].agg(['mean', 'std']).sort_values('mean', ascending=False)
plt.errorbar(range(len(type_scores)), type_scores['mean'], 
             yerr=type_scores['std'], fmt='o-', capsize=5, capthick=2)
plt.xticks(range(len(type_scores)), type_scores.index, rotation=45, ha='right')
plt.ylabel('–°—Ä–µ–¥–Ω–∏–π –æ–±—â–∏–π —Å–∫–æ—Ä')
plt.title('(h) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
plt.grid(True, alpha=0.3)

# 9. Efficiency frontier (Precision vs NDCG)
ax9 = plt.subplot(3, 3, 9)
plt.scatter(df['precision'], df['ndcg'], s=df['recall']*1000, 
           c=[type_colors.get(t, 'gray') for t in df['type']], alpha=0.6)

# –î–æ–±–∞–≤–ª—è–µ–º frontier line
df_sorted_prec = df.sort_values('precision')
plt.plot(df_sorted_prec['precision'], df_sorted_prec['ndcg'], '--', alpha=0.5, color='gray')

plt.xlabel('Precision')
plt.ylabel('NDCG')
plt.title('(i) Efficiency Frontier\n(—Ä–∞–∑–º–µ—Ä = Recall)')
plt.grid(True, alpha=0.3)

# –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
for _, row in df.nlargest(3, 'overall_score').iterrows():
    plt.annotate(row['algorithm'], (row['precision'], row['ndcg']), 
                xytext=(5, 5), textcoords='offset points', fontsize=8)

plt.tight_layout()
plt.savefig('scientific_analysis_figure1.png', dpi=300, bbox_inches='tight')
print("‚úÖ –§–∏–≥—É—Ä–∞ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'scientific_analysis_figure1.png'")

print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã 2: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

# –§–∏–≥—É—Ä–∞ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
fig, axes = plt.subplots(2, 3, figsize=(15, 10))

# 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
for i, metric in enumerate(['precision', 'recall', 'ndcg']):
    ax = axes[0, i]
    ax.hist(df[metric], bins=8, alpha=0.7, edgecolor='black')
    ax.axvline(df[metric].mean(), color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–µ–µ: {df[metric].mean():.4f}')
    ax.axvline(df[metric].median(), color='blue', linestyle='--', label=f'–ú–µ–¥–∏–∞–Ω–∞: {df[metric].median():.4f}')
    ax.set_xlabel(metric.upper())
    ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {metric.upper()}')
    ax.legend()
    ax.grid(True, alpha=0.3)

# 2. Q-Q plots –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
for i, metric in enumerate(['precision', 'recall', 'ndcg']):
    ax = axes[1, i]
    stats.probplot(df[metric], dist="norm", plot=ax)
    ax.set_title(f'Q-Q plot –¥–ª—è {metric.upper()}')
    ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('scientific_analysis_figure2.png', dpi=300, bbox_inches='tight')
print("‚úÖ –§–∏–≥—É—Ä–∞ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'scientific_analysis_figure2.png'")

print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π")

# –§–∏–≥—É—Ä–∞ 3: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π
fig, axes = plt.subplots(2, 2, figsize=(12, 10))

# 1. –°—Ä–µ–¥–Ω–µ–µ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ —Ç–∏–ø–∞–º
ax = axes[0, 0]
type_metrics = df.groupby('type')[['precision', 'recall', 'ndcg']].agg(['mean', 'std'])

types = type_metrics.index
x_pos = np.arange(len(types))
width = 0.25

for i, metric in enumerate(['precision', 'recall', 'ndcg']):
    means = type_metrics[(metric, 'mean')]
    stds = type_metrics[(metric, 'std')]
    ax.bar(x_pos + i*width, means, width, yerr=stds, 
           label=metric.upper(), alpha=0.8, capsize=3)

ax.set_xlabel('–¢–∏–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞')
ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
ax.set_title('–°—Ä–µ–¥–Ω–µ–µ ¬± std –ø–æ —Ç–∏–ø–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
ax.set_xticks(x_pos + width)
ax.set_xticklabels(types, rotation=45, ha='right')
ax.legend()
ax.grid(True, alpha=0.3)

# 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ax = axes[0, 1]
# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
metrics_for_heatmap = ['precision', 'recall', 'ndcg', 'overall_score']
df_norm = df.copy()
for metric in metrics_for_heatmap:
    df_norm[metric] = (df[metric] - df[metric].min()) / (df[metric].max() - df[metric].min())

heatmap_data = df_norm.set_index('algorithm')[metrics_for_heatmap].T
sns.heatmap(heatmap_data, annot=False, cmap='YlOrRd', cbar_kws={'label': '–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'})
ax.set_title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
ax.set_xlabel('–ê–ª–≥–æ—Ä–∏—Ç–º—ã')

# 3. –ü–∞—Ä–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
ax = axes[1, 0]
metrics_corr = df[['precision', 'recall', 'ndcg', 'accuracy']].corr()
# –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
mask = np.triu(np.ones_like(metrics_corr, dtype=bool))
sns.heatmap(metrics_corr, mask=mask, annot=True, cmap='coolwarm', center=0,
            square=True, fmt='.3f', cbar_kws={'label': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'})
ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ—Ç—Ä–∏–∫')

# 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å vs —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è)
ax = axes[1, 1]
# –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è)
complexity_scores = {
    'Random': 1, 'Popular': 2, 'KNN': 4, 'PCA': 3, 'NMF': 5, 'SVD': 4,
    'ALS': 6, 'WRMF': 5, 'LightFM-WARP': 7, 'PHCF-BPR': 7,
    'KNN+LightFM-WARP': 8, 'KNN+PHCF-BPR': 8, 'NCF': 9, 'DeepFM': 10, 'SASRec': 10
}

df['complexity'] = df['algorithm'].map(complexity_scores)

for algo_type in df['type'].unique():
    subset = df[df['type'] == algo_type]
    ax.scatter(subset['complexity'], subset['overall_score'], 
              label=algo_type, s=100, alpha=0.7, color=type_colors.get(algo_type, 'gray'))

ax.set_xlabel('–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è)')
ax.set_ylabel('–û–±—â–∏–π —Å–∫–æ—Ä')
ax.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å vs –°–ª–æ–∂–Ω–æ—Å—Ç—å')
ax.legend()
ax.grid(True, alpha=0.3)

# –î–æ–±–∞–≤–ª—è–µ–º trend line
z = np.polyfit(df['complexity'], df['overall_score'], 1)
p = np.poly1d(z)
ax.plot(df['complexity'], p(df['complexity']), "--", alpha=0.5, color='red')

plt.tight_layout()
plt.savefig('scientific_analysis_figure3.png', dpi=300, bbox_inches='tight')
print("‚úÖ –§–∏–≥—É—Ä–∞ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'scientific_analysis_figure3.png'")

print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
print("\nüìä –¢–∞–±–ª–∏—Ü–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
results_table = df[['algorithm', 'precision', 'recall', 'ndcg', 'accuracy', 'overall_score', 'type']].copy()
results_table = results_table.sort_values('overall_score', ascending=False)
results_table.index = range(1, len(results_table) + 1)
results_table.columns = ['–ê–ª–≥–æ—Ä–∏—Ç–º', 'Precision', 'Recall', 'NDCG', 'Accuracy', '–û–±—â–∏–π —Å–∫–æ—Ä', '–¢–∏–ø']

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
for col in ['Precision', 'Recall', 'NDCG', 'Accuracy', '–û–±—â–∏–π —Å–∫–æ—Ä']:
    results_table[col] = results_table[col].round(4)

print(results_table.to_string())

print("\nüìä –¢–∞–±–ª–∏—Ü–∞ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
type_stats = df.groupby('type')[['precision', 'recall', 'ndcg', 'accuracy', 'overall_score']].agg(['mean', 'std', 'count'])
type_stats.columns = ['_'.join(col).strip() for col in type_stats.columns.values]
type_stats = type_stats.round(4)
print(type_stats.to_string())

print("\nüìä –¢–∞–±–ª–∏—Ü–∞ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
correlation_matrix = df[['precision', 'recall', 'ndcg', 'accuracy']].corr().round(3)
print(correlation_matrix.to_string())

print("\nüìä –¢–∞–±–ª–∏—Ü–∞ 4: –¢–æ–ø-5 –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–µ")
for metric in ['precision', 'recall', 'ndcg', 'accuracy']:
    print(f"\n–¢–æ–ø-5 –ø–æ {metric.upper()}:")
    top5 = df.nlargest(5, metric)[['algorithm', metric, 'type']]
    top5.index = range(1, 6)
    print(top5.to_string())

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ CSV –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
results_table.to_csv('scientific_results_table.csv', index=True)
type_stats.to_csv('scientific_type_statistics.csv', index=True)
correlation_matrix.to_csv('scientific_correlation_matrix.csv', index=True)

print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ:")
print(f"  - 3 –Ω–∞—É—á–Ω—ã—Ö —Ä–∏—Å—É–Ω–∫–∞ (PNG)")
print(f"  - 3 —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (CSV)")
print(f"  - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

print(f"\nüìà –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:")
print(f"  1. –õ—É—á—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: {results_table.iloc[0]['–ê–ª–≥–æ—Ä–∏—Ç–º']} (—Å–∫–æ—Ä: {results_table.iloc[0]['–û–±—â–∏–π —Å–∫–æ—Ä']:.4f})")
print(f"  2. –õ—É—á—à–∏–π —Ç–∏–ø: {type_stats.loc[type_stats['overall_score_mean'].idxmax()].name}")
print(f"  3. –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation_matrix.abs().unstack().sort_values(ascending=False).iloc[1]:.3f}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ summary plot
plt.figure(figsize=(12, 8))

# –°–æ–∑–¥–∞–µ–º comprehensive plot
gs = plt.GridSpec(2, 3, hspace=0.3, wspace=0.3)

# 1. –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
ax1 = plt.subplot(gs[0, :])
top10 = results_table.head(10)
colors = [type_colors.get(t, 'gray') for t in top10['–¢–∏–ø']]
bars = plt.bar(range(len(top10)), top10['–û–±—â–∏–π —Å–∫–æ—Ä'], color=colors, alpha=0.8)
plt.xticks(range(len(top10)), top10['–ê–ª–≥–æ—Ä–∏—Ç–º'], rotation=45, ha='right')
plt.ylabel('–û–±—â–∏–π —Å–∫–æ—Ä')
plt.title('–¢–æ–ø-10 –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', fontsize=14, fontweight='bold')
plt.grid(True, alpha=0.3)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
for i, bar in enumerate(bars):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height + 0.001,
             f'{height:.3f}', ha='center', va='bottom', fontsize=9)

# 2. –°—Ä–µ–¥–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
ax2 = plt.subplot(gs[1, 0])
type_means = df.groupby('type')['overall_score'].mean().sort_values(ascending=False)
colors_type = [type_colors.get(t, 'gray') for t in type_means.index]
plt.bar(range(len(type_means)), type_means.values, color=colors_type, alpha=0.8)
plt.xticks(range(len(type_means)), type_means.index, rotation=45, ha='right')
plt.ylabel('–°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä')
plt.title('–°—Ä–µ–¥–Ω–∏–µ —Å–∫–æ—Ä—ã –ø–æ —Ç–∏–ø–∞–º')
plt.grid(True, alpha=0.3)

# 3. Precision vs Recall
ax3 = plt.subplot(gs[1, 1])
for algo_type in df['type'].unique():
    subset = df[df['type'] == algo_type]
    plt.scatter(subset['precision'], subset['recall'], 
               label=algo_type, s=80, alpha=0.7, color=type_colors.get(algo_type, 'gray'))
plt.xlabel('Precision')
plt.ylabel('Recall')
plt.title('Precision vs Recall')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)
plt.grid(True, alpha=0.3)

# 4. –ú–µ—Ç—Ä–∏–∫–∏ –ª–∏–¥–µ—Ä–∞
ax4 = plt.subplot(gs[1, 2])
leader = results_table.iloc[0]
metrics_leader = [leader['Precision'], leader['Recall'], leader['NDCG'], leader['Accuracy']]
metric_names = ['Precision', 'Recall', 'NDCG', 'Accuracy']
colors_metrics = ['red', 'blue', 'green', 'orange']
plt.bar(metric_names, metrics_leader, color=colors_metrics, alpha=0.8)
plt.title(f"–ú–µ—Ç—Ä–∏–∫–∏ –ª–∏–¥–µ—Ä–∞\n({leader['–ê–ª–≥–æ—Ä–∏—Ç–º']})")
plt.xticks(rotation=45)
plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
plt.grid(True, alpha=0.3)

plt.suptitle('–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', fontsize=16, fontweight='bold')
plt.savefig('scientific_analysis_summary.png', dpi=300, bbox_inches='tight')
print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'scientific_analysis_summary.png'")

print(f"\nüéØ –ù–ê–£–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
print(f"–í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –Ω–∞—É—á–Ω—É—é —Å—Ç–∞—Ç—å—é.")