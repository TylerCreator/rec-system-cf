import pandas as pd
import numpy as np
from sklearn.metrics import precision_score, recall_score

# –§–∏–∫—Å–∏—Ä—É–µ–º random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)

print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–ß–ï–¢–ê PRECISION –ò –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–ò")
print("="*60)

# ============================ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ============================
df = pd.read_csv("calls.csv", sep=";")
df = df[~df['owner'].str.contains('cookies', na=False)]
df = df.sort_values('start_time')

owners = df['owner'].unique()
mids = df['mid'].unique()

train_size = int(len(df) * 0.7)
df_train = df[:train_size]
df_test = df[train_size:]

print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(owners)}")
print(f"  - –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(mids)}")
print(f"  - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df_train)}")
print(f"  - –¢–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df_test)}")

# ============================ –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ============================
def get_popular_services(df, mids):
    counts = df['mid'].value_counts().reindex(mids, fill_value=0)
    counts_max = np.max(counts.values)
    return np.argsort(counts.values/counts_max)[::-1]

popular_services = get_popular_services(df_train, mids)
popularity_counts = df_train['mid'].value_counts()

print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:")
print(f"  - –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {popularity_counts.index[0]} ({popularity_counts.iloc[0]} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)")
print(f"  - –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:")
for i in range(5):
    service = popularity_counts.index[i]
    count = popularity_counts.iloc[i]
    percentage = (count / len(df_train)) * 100
    print(f"    {i+1}. –°–µ—Ä–≤–∏—Å {service}: {count} —Ä–∞–∑ ({percentage:.1f}% –æ—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π)")

# ============================ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ============================
def build_matrix(df, owners, mids, normalize=False):
    pivot = df.pivot_table(index='owner', columns='mid', values='id', aggfunc='count').fillna(0)
    pivot = pivot.reindex(index=owners, columns=mids, fill_value=0)
    mat = pivot.values
    if normalize:
        row_sums = mat.sum(axis=1, keepdims=True)
        row_sums[row_sums == 0] = 1
        mat = mat / row_sums
    return mat

def get_used_services(X):
    return [set(np.where(row > 0)[0]) for row in X]

def get_recommendations(scores, used, popular, k):
    recs = []
    for i, user_scores in enumerate(scores):
        sorted_items = np.argsort(user_scores)[::-1]
        filtered = [item for item in sorted_items if item not in used[i]]
        if len(filtered) < k:
            extra = [item for item in popular if item not in used[i] and item not in filtered]
            filtered += extra
        recs.append(filtered[:k])
    return recs

# ============================ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ============================
X_train = build_matrix(df_train, owners, mids, normalize=True)
X_test = build_matrix(df_test, owners, mids, normalize=True)

used_train = get_used_services(X_train)
actual_test = get_used_services(X_test)

print(f"\nüî¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
services_per_user_train = [len(used) for used in used_train]
services_per_user_test = [len(actual) for actual in actual_test]

print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (train): {np.mean(services_per_user_train):.2f}")
print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (test): {np.mean(services_per_user_test):.2f}")
print(f"  - –ú–µ–¥–∏–∞–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (train): {np.median(services_per_user_train):.2f}")
print(f"  - –ú–µ–¥–∏–∞–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (test): {np.median(services_per_user_test):.2f}")

# ============================ –ê–Ω–∞–ª–∏–∑ Popular –º–æ–¥–µ–ª–∏ ============================
print(f"\nüèÜ –ê–ù–ê–õ–ò–ó POPULAR –ú–û–î–ï–õ–ò:")
print(f"  Popular –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ç–æ–ø-–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Popular –º–æ–¥–µ–ª–∏
popular_predictions = np.tile(popular_services, (len(owners), 1))
popular_recs_k5 = get_recommendations(popular_predictions, used_train, popular_services, 5)
popular_recs_k10 = get_recommendations(popular_predictions, used_train, popular_services, 10)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π Popular –º–æ–¥–µ–ª–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")

hits_k5 = []
hits_k10 = []
precision_k5 = []
precision_k10 = []

for i in range(len(actual_test)):
    # k=5
    recs_5 = set(popular_recs_k5[i][:5])
    actual_5 = actual_test[i]
    hits_5 = len(recs_5.intersection(actual_5))
    hits_k5.append(hits_5)
    precision_k5.append(hits_5 / 5 if len(recs_5) > 0 else 0)
    
    # k=10
    recs_10 = set(popular_recs_k10[i][:10])
    hits_10 = len(recs_10.intersection(actual_5))
    hits_k10.append(hits_10)
    precision_k10.append(hits_10 / 10 if len(recs_10) > 0 else 0)

print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø—Ä–∏ k=5: {np.mean(hits_k5):.3f}")
print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø—Ä–∏ k=10: {np.mean(hits_k10):.3f}")
print(f"  - –°—Ä–µ–¥–Ω–∏–π Precision –ø—Ä–∏ k=5: {np.mean(precision_k5):.4f}")
print(f"  - –°—Ä–µ–¥–Ω–∏–π Precision –ø—Ä–∏ k=10: {np.mean(precision_k10):.4f}")

# ============================ –ê–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É Popular —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω ============================
print(f"\nüí° –ü–û–ß–ï–ú–£ POPULAR –ú–û–î–ï–õ–¨ –≠–§–§–ï–ö–¢–ò–í–ù–ê:")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
test_service_counts = df_test['mid'].value_counts()
top_5_popular = popularity_counts.head(5).index.tolist()
top_10_popular = popularity_counts.head(10).index.tolist()

test_usage_top5 = sum([test_service_counts.get(service, 0) for service in top_5_popular])
test_usage_top10 = sum([test_service_counts.get(service, 0) for service in top_10_popular])
total_test_usage = len(df_test)

print(f"  1. üìà –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:")
print(f"     - –¢–æ–ø-5 —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–∫—Ä—ã–≤–∞—é—Ç {(test_usage_top5/total_test_usage)*100:.1f}% —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
print(f"     - –¢–æ–ø-10 —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–∫—Ä—ã–≤–∞—é—Ç {(test_usage_top10/total_test_usage)*100:.1f}% —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")

# –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É train –∏ test
print(f"\n  2. üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É train –∏ test:")
for i, service in enumerate(top_5_popular):
    train_rank = i + 1
    test_count = test_service_counts.get(service, 0)
    test_rank = test_service_counts.index.get_loc(service) + 1 if service in test_service_counts.index else "–Ω–µ –≤ —Ç–æ–ø–µ"
    print(f"     - –°–µ—Ä–≤–∏—Å {service}: train_rank={train_rank}, test_rank={test_rank}, test_count={test_count}")

# ============================ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Random –º–æ–¥–µ–ª—å—é ============================
print(f"\nüé≤ –°–†–ê–í–ù–ï–ù–ò–ï –° RANDOM –ú–û–î–ï–õ–¨–Æ:")

# Random —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
random_predictions = np.random.rand(len(owners), len(mids))
random_recs_k5 = get_recommendations(random_predictions, used_train, popular_services, 5)

random_hits_k5 = []
random_precision_k5 = []

for i in range(len(actual_test)):
    recs_5 = set(random_recs_k5[i][:5])
    actual_5 = actual_test[i]
    hits_5 = len(recs_5.intersection(actual_5))
    random_hits_k5.append(hits_5)
    random_precision_k5.append(hits_5 / 5 if len(recs_5) > 0 else 0)

print(f"  - Random –º–æ–¥–µ–ª—å - —Å—Ä–µ–¥–Ω–∏–π Precision –ø—Ä–∏ k=5: {np.mean(random_precision_k5):.4f}")
print(f"  - Popular –º–æ–¥–µ–ª—å - —Å—Ä–µ–¥–Ω–∏–π Precision –ø—Ä–∏ k=5: {np.mean(precision_k5):.4f}")
print(f"  - –£–ª—É—á—à–µ–Ω–∏–µ Popular –Ω–∞–¥ Random: {(np.mean(precision_k5) / np.mean(random_precision_k5) - 1) * 100:.1f}%")

# ============================ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã Precision ============================
print(f"\nüìê –ö–ê–ö –°–ß–ò–¢–ê–ï–¢–°–Ø PRECISION:")
print(f"  Precision = True Positives / (True Positives + False Positives)")
print(f"  Precision = –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π / –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
print(f"  ")
print(f"  –î–ª—è k=5: Precision = –ü–æ–ø–∞–¥–∞–Ω–∏—è –∏–∑ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π / 5")
print(f"  –î–ª—è k=10: Precision = –ü–æ–ø–∞–¥–∞–Ω–∏—è –∏–∑ 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π / 10")

print(f"\nüéØ –í–´–í–û–î–´:")
print(f"  1. Popular –º–æ–¥–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
print(f"  2. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã –º–µ–∂–¥—É train –∏ test –ø–µ—Ä–∏–æ–¥–∞–º–∏")
print(f"  3. –ü—Ä–∏–Ω—Ü–∏–ø –ü–∞—Ä–µ—Ç–æ: –º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞")
print(f"  4. Popular –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π Precision, –Ω–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–∏–∑–∫–∏–π Recall")
print(f"  5. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ Popular —Ö–æ—Ä–æ—à –∫–∞–∫ baseline –∏–ª–∏ fallback –º–æ–¥–µ–ª—å")

# ============================ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ============================
print(f"\nüìù –ü–†–ò–ú–ï–† –†–ê–°–ß–ï–¢–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ‚Ññ0:")
user_id = 0
actual_services = actual_test[user_id]
popular_recs = set(popular_recs_k5[user_id][:5])

print(f"  - –†–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ: {actual_services}")
print(f"  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Popular –º–æ–¥–µ–ª–∏ (k=5): {popular_recs}")
print(f"  - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {popular_recs.intersection(actual_services)}")
print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π: {len(popular_recs.intersection(actual_services))}")
print(f"  - Precision –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(popular_recs.intersection(actual_services)) / 5:.4f}")